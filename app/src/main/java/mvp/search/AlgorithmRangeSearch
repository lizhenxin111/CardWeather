public class SearchCityRangeModel implements ISearchContract.IRangeModel<List<City>> {
    private static final Integer[] MONTH_LONG_ARRAY = new Integer[]{1, 3, 5, 7, 8, 10, 12};
    private static final int[] MONTH_SHORT_ARRAY = new int[]{4, 6, 9, 11};

    private static final List MONTH_LONG = Arrays.asList(MONTH_LONG_ARRAY);
    private static final List MONTH_SHORT = Arrays.asList(MONTH_SHORT_ARRAY);

    int count = 0;

    @Override
    public void requestData(String city,
                            int fYear, int fMonth, int fDay, int fHour,
                            int tYear, int tMonth, int tDay, int tHour,
                            final ISearchContract.OnGetResultListener<List<City>> onGetResultListener) {
        final ArrayList<String> list = calculateApis(city,
                fYear, fMonth, fDay, fHour,
                tYear, tMonth, tDay, tHour);

        final ArrayList<City> resultList = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            String url = list.get(i);
            StringRequest request = new StringRequest(url, new StringListener() {
                @Override
                public void onFailed(Object o) {

                }

                @Override
                public void onSuccess(String result) {
                    City c = new Gson().fromJson(result, City.class);
                    resultList.add(c);
                    count++;
                    if (count == list.size()) onGetResultListener.onGetResult(resultList);
                }
            });
            AppContext.getQueue().execute(request);
        }
    }

    /**
     * 计算并存储所有API
     * 先计算首或尾（不完成的年、月、日），再计算中间完整的年份
     */
    private ArrayList<String> calculateApis(String city,
                                            int fYear, int fMonth, int fDay, int fHour,
                                            int tYear, int tMonth, int tDay, int tHour) {
        ArrayList<String> urlList = new ArrayList<>();
        if (fHour != -1 && tHour != -1) {
            //首年不完整，需要单独计算
            for (int h = fHour; h < 23; h++) {      //首日中所有小时
                urlList.add(AQI.getCityHour(city, fYear + "" + add0(fMonth) + "" + add0(fDay), add0(h)));
            }
            for (int d = fDay + 1; d <= getDaysInMonth(fYear, fMonth); d++) {       //首月中所有天（不包含首天）
                for (int h = 0; h < 23; h++) {
                    urlList.add(AQI.getCityHour(city, fYear + "" + add0(fMonth) + "" + add0(d), add0(h)));
                }
            }
            for (int m = fMonth + 1; m <= 12; m++) {     //首年中所有月(不包含首月)
                for (int d = 0; d < getDaysInMonth(fYear, m); d++) {
                    for (int h = 0; h < 23; h++) {
                        urlList.add(AQI.getCityHour(city, fYear + "" + add0(m) + "" + add0(d), add0(h)));
                    }
                }
            }

            //中间的年份
            for (int y = fYear + 1; y <= tYear - 1; y++) {
                for (int m = 1; m <= 12; m++) {
                    for (int d = 0; d < getDaysInMonth(y, m); d++) {
                        for (int h = 0; h < 23; h++) {
                            urlList.add(AQI.getCityHour(city, y + "" + add0(m) + "" + add0(d), add0(h)));
                        }
                    }
                }
            }

            //同理，单独计算末年
            for (int h = 0; h < tHour; h++) {      //末日中所有小时
                urlList.add(AQI.getCityHour(city, tYear + "" + add0(tMonth) + "" + add0(tDay), add0(h)));
            }
            for (int d = 1; d <= getDaysInMonth(tYear, tMonth) - 1; d++) {       //末月中所有天（不包含末天）
                for (int h = 0; h < 23; h++) {
                    urlList.add(AQI.getCityHour(city, tYear + "" + add0(tMonth) + "" + add0(d), add0(h)));
                }
            }
            for (int m = 1; m <= tMonth - 1; m++) {     //末年中所有月(不包含末月)
                for (int d = 0; d < getDaysInMonth(tYear, m); d++) {
                    for (int h = 0; h < 23; h++) {
                        urlList.add(AQI.getCityHour(city, tYear + "" + add0(m) + "" + add0(d), add0(h)));
                    }
                }
            }
        } else {
            //首年不完整，需要单独计算
            for (int d = fDay + 1; d <= getDaysInMonth(fYear, fMonth); d++) {       //首月中所有天（不包含首天）
                urlList.add(AQI.getCityDay(city, fYear + "" + add0(fMonth) + "" + add0(d)));

            }
            for (int m = fMonth + 1; m <= 12; m++) {     //首年中所有月(不包含首月)
                for (int d = 0; d < getDaysInMonth(fYear, m); d++) {
                    urlList.add(AQI.getCityDay(city, fYear + "" + add0(m) + "" + add0(d)));
                }
            }

            //中间的年份
            for (int y = fYear + 1; y <= tYear - 1; y++) {
                for (int m = 1; m <= 12; m++) {
                    for (int d = 0; d < getDaysInMonth(y, m); d++) {
                        urlList.add(AQI.getCityDay(city, y + "" + add0(m) + "" + add0(d)));
                    }
                }
            }

            //同理，单独计算末年
            for (int d = 1; d <= getDaysInMonth(tYear, tMonth) - 1; d++) {       //末月中所有天（不包含末天）
                urlList.add(AQI.getCityDay(city, tYear + "" + add0(tMonth) + "" + add0(d)));
            }
            for (int m = 1; m <= tMonth - 1; m++) {     //末年中所有月(不包含末月)
                for (int d = 0; d < getDaysInMonth(tYear, m); d++) {
                    urlList.add(AQI.getCityDay(city, tYear + "" + add0(m) + "" + add0(d)));
                }
            }
        }
        return urlList;
    }

    private int getDaysInMonth(int year, int month) {
        if (month == 2) {
            return year % 100 != 0 && year% 4 == 0 ?29 : 28;
        }
        if (MONTH_LONG.contains(month)) {
            return 31;
        }
        return 30;
    }

    private String add0(int d) {
        return (d >= 10 ? "" : "0") + d;
    }
}
